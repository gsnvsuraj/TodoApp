{"version":3,"sources":["Component/task.jsx","Component/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","title","status","id","e","console","log","target","value","this","handleRemove","className","onClick","remove","Component","Main","downloadTxtFile","strings","tasks","forEach","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","min","max","handleSub","bind","setState","myData","event","varTasks","task","getElementById","Math","floor","random","push","preventDefault","rem","filter","todo","length","map","key","onSubmit","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gWAqCeA,E,kDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,EAAKF,MAAME,MAClBC,OAAQ,EAAKH,MAAMG,OACnBC,GAAI,EAAKJ,MAAMI,IANJ,E,yDAUNC,GACTC,QAAQC,IAAIF,EAAEG,SACS,IAAnBH,EAAEG,OAAOC,OACTH,QAAQC,IAAIF,EAAEG,OAAOC,S,6BAGtBL,GACHM,KAAKV,MAAMW,aAAaP,K,+BAGlB,IAAD,OACL,OACI,6BACI,yBAAKQ,UAAU,OACX,6BACI,8BAAOF,KAAKT,MAAMC,OAClB,4BAAQU,UAAU,gCAAgCC,QAAS,WAAO,EAAKC,OAAO,EAAKb,MAAMG,MAAzF,iB,GA3BLW,aC4FJC,E,kDAzFX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAqCViB,gBAAkB,WACd,IAAIC,EAAU,gBACd,EAAKjB,MAAMkB,MAAMC,SAAQ,SAAAC,GACrBH,GAAWG,EAAQnB,MAAQ,QAG/B,IAAMmB,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACP,GAAU,CAACQ,KAAM,eACxCL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAW,WACnBR,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,SA9CR,EAAKhC,MAAQ,CACTkB,MAAO,GACPe,IAAK,IACLC,IAAK,OAGT,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBATF,E,gEAaf3B,KAAK4B,SAAS,CACVnB,MAAOoB,EAAOpB,U,gCAIZqB,GACN,IAAIC,EAAW/B,KAAKT,MAAMkB,MAItBuB,EAAO,CAAC,MAHCpB,SAASqB,eAAe,UAAUlC,MAGlB,OAAQ,EAAO,GAFjCmC,KAAKC,MAAMD,KAAKE,UAAUpC,KAAKT,MAAMkC,IAAIzB,KAAKT,MAAMiC,IAAI,GAAGxB,KAAKT,MAAMiC,MAGjFO,EAASM,KAAKL,GAEdhC,KAAK4B,SAAS,CAACnB,MAAMsB,IACrBnB,SAASqB,eAAe,UAAUlC,MAAQ,GAC1C+B,EAAMQ,mB,mCAGG5C,GACT,IAAM6C,EAAMvC,KAAKT,MAAMkB,MAAM+B,QAAO,SAACC,GACpC,GAAGA,EAAK/C,KAAOA,EAAI,OAAO+C,KAE3BzC,KAAK4B,SAAS,CAACnB,MAAM8B,M,+BAiBf,IAAD,OACL,OACI,6BACI,6BACI,wBAAIrC,UAAU,0BAAd,cACA,yBAAKA,UAAU,6BACkB,IAA5BF,KAAKT,MAAMkB,MAAMiC,OACd,iDAA8B,KACjC1C,KAAKT,MAAMkB,MAAMkC,KAAI,gBAAEnD,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAjB,OAAyB,kBAAC,EAAD,CAAMF,MAAOA,EAAOC,OAAQA,EAAQC,GAAIA,EACvFkD,IAAKlD,EAAIO,aAAc,kBAAM,EAAKA,aAAaP,WAGvD,6BAAM,6BAAM,6BAEZ,6BACI,wBAAIQ,UAAU,oBAAd,cAIA,6BACI,0BAAM2C,SAAU7C,KAAK0B,WACjB,yBAAKxB,UAAU,IACX,2BAAOc,KAAK,OAAOtB,GAAG,SAASoD,KAAK,OAAO5C,UAAU,KACrD,2BAAOc,KAAK,SAASjB,MAAM,MAAMG,UAAU,mDAGjD,6BAAM,6BAEZ,6BACI,4BAAQA,UAAU,4CAA4CC,QAASH,KAAKO,iBAA5E,uB,GAlFLF,aCcJ0C,MAbf,WACE,OACE,yBAAK7C,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAGF,kBAAC,EAAD,QCAc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASqB,eAAe,SDyHpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.ff96c84e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Task extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: this.props.title,\r\n            status: this.props.status,\r\n            id: this.props.id\r\n        }\r\n    }\r\n\r\n    changeCompld(e) {\r\n        console.log(e.target);\r\n        if (e.target.value === true)\r\n            console.log(e.target.value);\r\n    }\r\n\r\n    remove(id) {\r\n        this.props.handleRemove(id);\r\n    }\r\n    \r\n    render() { \r\n        return (\r\n            <div>\r\n                <div className=\"p-2\">\r\n                    <div>\r\n                        <span>{this.state.title}</span>\r\n                        <button className=\"btn btn-danger btn-sm m-2 p-1\" onClick={() => {this.remove(this.state.id)}}>Remove</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Task;","import React, { Component } from 'react';\r\nimport myData from './data.json';\r\nimport Task from './task';\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tasks: [],\r\n            min: 10000,\r\n            max: 99999\r\n        };\r\n\r\n        this.handleSub = this.handleSub.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            tasks: myData.tasks\r\n        });\r\n    }\r\n\r\n    handleSub(event) {\r\n        let varTasks = this.state.tasks;\r\n        let values = document.getElementById(\"todoIn\").value;\r\n        let rand = Math.floor(Math.random()*(this.state.max-this.state.min+1)+this.state.min);\r\n\r\n        let task = {\"title\": values, \"cmpld\":false, \"id\":rand };\r\n        varTasks.push(task);\r\n\r\n        this.setState({tasks:varTasks});\r\n        document.getElementById(\"todoIn\").value = \"\";\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleRemove(id) {\r\n        const rem = this.state.tasks.filter((todo) => \r\n        {if(todo.id !== id) return todo;});\r\n\r\n        this.setState({tasks:rem});\r\n    }\r\n\r\n    downloadTxtFile = () => {\r\n        let strings = \"Todo Tasks-\\n\";\r\n        this.state.tasks.forEach(element => {\r\n            strings += element.title + \"\\n\";\r\n        });\r\n\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([strings], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"todo.txt\";\r\n        document.body.appendChild(element);\r\n        element.click();\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h2 className=\"m-4 font-weight-bolder\">Todo Tasks</h2>\r\n                    <div className=\"m-1 lead font-weight-bold\">\r\n                        {this.state.tasks.length === 0?\r\n                            <div>No tasks present</div> : null}\r\n                        {this.state.tasks.map(({title, status, id}) => <Task title={title} status={status} id={id}\r\n                        key={id} handleRemove={() => this.handleRemove(id)} />)}\r\n                    </div>\r\n                </div>\r\n                <br /><br /><br />\r\n\r\n                <div>\r\n                    <h3 className=\"font-weight-bold\">\r\n                        Add a Todo\r\n                    </h3>\r\n\r\n                    <div>\r\n                        <form onSubmit={this.handleSub}>\r\n                            <div className=\"\">\r\n                                <input type=\"text\" id=\"todoIn\" name=\"todo\" className=\"\" />\r\n                                <input type=\"submit\" value=\"Add\" className=\"btn btn-primary btn-sm m-2 font-weight-bold\" />\r\n                            </div>\r\n                        </form>\r\n                    </div><br /><br />\r\n\r\n                    <div>\r\n                        <button className=\"btn btn-success btn-lg font-weight-bolder\" onClick={this.downloadTxtFile}>Download TXT</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport './bootstrap.min.css';\nimport Main from './Component/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ToDo App</h1>\n      </header>\n\n      <Main />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}